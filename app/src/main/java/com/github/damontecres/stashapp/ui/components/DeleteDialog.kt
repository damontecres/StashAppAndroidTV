package com.github.damontecres.stashapp.ui.components

import android.icu.text.MessageFormat
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import androidx.tv.material3.ButtonDefaults
import androidx.tv.material3.Icon
import androidx.tv.material3.MaterialTheme
import androidx.tv.material3.Text
import androidx.tv.material3.surfaceColorAtElevation
import com.github.damontecres.stashapp.R
import com.github.damontecres.stashapp.data.DataType
import com.github.damontecres.stashapp.ui.PreviewTheme
import com.github.damontecres.stashapp.ui.PreviewTvSpec
import com.github.damontecres.stashapp.ui.compat.Button
import com.github.damontecres.stashapp.ui.tryRequestFocus

@Composable
fun DeleteDialog(
    onDeleteConfirm: (deleteFiles: Boolean, deleteGenerated: Boolean) -> Unit,
    onDismissRequest: () -> Unit,
    dataType: DataType,
    name: String,
    files: List<String>,
) {
    var deleteGenerated by remember { mutableStateOf(true) }
    var deleteFiles by remember { mutableStateOf(false) }

    val focusRequester = remember { FocusRequester() }
    LaunchedEffect(Unit) { focusRequester.tryRequestFocus() }

    Dialog(
        onDismissRequest = onDismissRequest,
        properties = DialogProperties(),
    ) {
        LazyColumn(
            modifier =
                Modifier
                    .background(
                        color = MaterialTheme.colorScheme.surfaceColorAtElevation(3.dp),
                        shape = RoundedCornerShape(16.dp),
                    ),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp),
        ) {
            stickyHeader {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    modifier = Modifier.fillMaxWidth(),
                ) {
                    Icon(
                        imageVector = Icons.Default.Delete,
                        contentDescription = stringResource(R.string.stashapp_actions_delete),
                        tint = Color.Red,
                    )
                    Text(
                        text = stringResource(R.string.stashapp_actions_delete_entity, stringResource(dataType.stringId)) + ": $name",
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.onSurface,
                        modifier = Modifier,
                    )
                }
            }
            item {
                val result =
                    MessageFormat(stringResource(R.string.stashapp_dialogs_delete_entity_desc))
                        .format(
                            mapOf(
                                "count" to 1,
                                "singularEntity" to stringResource(dataType.stringId),
                                "pluralEntity" to stringResource(dataType.pluralStringId),
                            ),
                        )
                Text(
                    text = result,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface,
                    modifier = Modifier,
                )
            }
            if (deleteFiles && files.isNotEmpty()) {
                item {
                    Box(
                        modifier = Modifier.background(MaterialTheme.colorScheme.errorContainer.copy(alpha = .5f)),
                    ) {
                        Column(
                            modifier =
                                Modifier
                                    .fillMaxWidth()
                                    .padding(8.dp)
                                    .animateItem(),
                        ) {
                            val result =
                                MessageFormat(stringResource(R.string.stashapp_dialogs_delete_alert))
                                    .format(
                                        mapOf(
                                            "count" to files.size,
                                            "singularEntity" to stringResource(R.string.stashapp_file),
                                            "pluralEntity" to stringResource(R.string.stashapp_files),
                                        ),
                                    )
                            Text(
                                text = result,
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurface,
                                modifier = Modifier,
                            )
                            files.forEachIndexed { index, v ->
                                Text(
                                    text = "${index + 1}. $v",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurface,
                                    modifier = Modifier.padding(start = 8.dp),
                                )
                            }
                        }
                    }
                }
            }
            item {
                SwitchWithLabel(
                    label = stringResource(R.string.stashapp_actions_delete_file),
                    checked = deleteFiles,
                    onStateChange = { deleteFiles = it },
                    modifier = Modifier,
                )
            }
            item {
                SwitchWithLabel(
                    label = stringResource(R.string.stashapp_actions_delete_generated_supporting_files),
                    checked = deleteGenerated,
                    onStateChange = { deleteGenerated = it },
                    modifier = Modifier,
                )
            }
            item {
                Row(
                    horizontalArrangement = Arrangement.SpaceEvenly,
                    modifier = Modifier.fillMaxWidth(),
                ) {
                    Button(
                        onClick = onDismissRequest,
                        enabled = true,
                        modifier = Modifier.focusRequester(focusRequester),
                    ) {
                        Text(
                            text = stringResource(R.string.stashapp_actions_cancel),
                        )
                    }
                    Button(
                        onClick = {
                            onDeleteConfirm.invoke(deleteFiles, deleteGenerated)
                        },
                        enabled = deleteGenerated || deleteFiles,
                        colors =
                            ButtonDefaults.colors(
                                containerColor = MaterialTheme.colorScheme.errorContainer,
                            ),
                    ) {
                        Text(
                            text = stringResource(R.string.stashapp_actions_delete),
                            color = MaterialTheme.colorScheme.onErrorContainer,
                        )
                    }
                }
            }
        }
    }
}

@Composable
@PreviewTvSpec
private fun DeleteDialogPreview() {
    PreviewTheme {
        DeleteDialog(
            onDeleteConfirm = { _, _ -> },
            onDismissRequest = {},
            dataType = DataType.SCENE,
            name = "This is the scene name",
            files = listOf("file1", "file2"),
        )
    }
}
